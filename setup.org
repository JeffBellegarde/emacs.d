#+TITLE: Jeff Bellegarde's Emacs configuration
#+OPTIONS: toc:4 h:4
#+PROPERTY: header-args    :results silent

* To be done

* Emacs Basics
** Personal information

Who I am.
#+BEGIN_SRC emacs-lisp results:silent
  (setq user-full-name "Jeff Bellegarde"
        user-mail-address "bellegar@gmail.com")
#+END_SRC

** Basic config
#+begin_src emacs-lisp
(require 'use-package)
(column-number-mode)
(tool-bar-mode -1)
(line-number-mode 1)
(add-hook 'after-init-hook 'server-start)

;;mode-compile
(autoload 'mode-compile "mode-compile"
  "Command to compile current buffer file based on the major mode" t)
(global-set-key "\C-cc" 'mode-compile)
(autoload 'mode-compile-kill "mode-compile"
  "Command to kill a compilation launched by `mode-compile'" t)
(global-set-key "\C-ck" 'mode-compile-kill)
(global-set-key "\C-z" 'undo)
(autoload 'git-mergetool-emacsclient-ediff "git-ediff" "Run Ediff for git" t)
(auto-compression-mode 1)
(defalias 'yes-or-no-p 'y-or-n-p)
(setq use-dialog-box nil)

(setq ring-bell-function (lambda () (message "*beep*")))
#+end_src

** Customization   
#+begin_src emacs-lisp
(setq custom-file (expand-file-name "emacs-customizations.el" jmb-emacs-config-dir))
(load custom-file)
#+end_src

* Global Minor Modes
** Winner (window layouts)
Binds C-c <left> and C-c <right>
#+begin_src emacs-lisp
(when (fboundp 'winner-mode)
      (winner-mode 1))
#+end_src

** Helm

*** Basic

#+BEGIN_SRC emacs-lisp  :results silent
    (use-package helm
      :ensure t
      :bind (
             ("C-c h" . helm-command-prefix)
             ("M-x" . helm-M-x)
             ("C-x b" . helm-mini)
             ("C-h SPC" . helm-all-mark-rings)
             ("C-x C-f" . helm-find-files))
      :config (progn
                (require 'helm-config)
                (helm-mode 1)
                (global-unset-key (kbd "C-x c"))
                ;;rebind the keys
                (bind-key "C-c h g" 'helm-google-suggest)
                (bind-key "C-c h o" 'helm-occur)
                (bind-key "C-c h x" 'helm-register)
                (bind-key "C-c h M-:" 'helm-eval-expression-with-eldoc)
                (setq helm-M-x-fuzzy-match t)
                (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
                (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
                (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z
                (define-key minibuffer-local-map (kbd "C-c C-l") 'helm-minibuffer-history)))
#+END_SRC

*** Grep
Use ack and use resursive by default. C-u to be non-recursive.
#+begin_src emacs-lisp
  (when (executable-find "ack")
    (setq helm-grep-default-command "ack -H --no-group --no-color %p %f"
          helm-grep-default-recurse-command "ack -Hn --no-group --no-color %p %f"))
#+end_src

*** Descbinds
#+begin_src emacs-lisp
  (use-package helm-descbinds
    :ensure t
    :defer t
    :bind ("C-h b" . helm-descbinds)
    :config
    (progn
      (helm-descbinds-mode)))
#+end_src

*** swoop

#+begin_src emacs-lisp
  (use-package helm-descbinds
    :ensure t
    :defer t
    :bind
    (("M-i" . helm-swoop)
     ("M-I" . helm-swoop-back-to-last-point)
     ("C-c M-i" . helm-multi-swoop)
     ("C-x M-i" . helm-multi-swoop-all)))
#+end_src
   
** Hydra
#+begin_src emacs-lisp
(use-package hydra)
#+end_src

*** Config
#+begin_src emacs-lisp
(hydra-add-font-lock)
#+end_src

*** Zoom

#+begin_src emacs-lisp
  (defhydra hydra-zoom (global-map "<f2>")
    "zoom"
    ("g" text-scale-increase "in")
    ("l" text-scale-decrease "out")
    ("0" (text-scale-set 0) "reset"))
#+end_src
   
   
*** Windmove
#+begin_src emacs-lisp
  (defun hydra-move-splitter-left (arg)
    "Move window splitter left."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'right))
        (shrink-window-horizontally arg)
      (enlarge-window-horizontally arg)))

  (defun hydra-move-splitter-right (arg)
    "Move window splitter right."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'right))
        (enlarge-window-horizontally arg)
      (shrink-window-horizontally arg)))

  (defun hydra-move-splitter-up (arg)
    "Move window splitter up."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'up))
        (enlarge-window arg)
      (shrink-window arg)))

  (defun hydra-move-splitter-down (arg)
    "Move window splitter down."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'up))
        (shrink-window arg)
      (enlarge-window arg)))

  (defhydra hydra-window (:color amaranth)
    "window"
    ("h" windmove-left)
    ("j" windmove-down)
    ("k" windmove-up)
    ("l" windmove-right)
    ("H" hydra-move-splitter-left)
    ("J" hydra-move-splitter-down)
    ("K" hydra-move-splitter-up)
    ("L" hydra-move-splitter-right)
    
    ("3" (lambda ()
           (interactive)
           (split-window-right)
           (windmove-right))
     "vert")
    ("2" (lambda ()
           (interactive)
           (split-window-below)
           (windmove-down))
     "horz")
    ("t" transpose-frame "'")
    ("1" delete-other-windows "one" :color blue)
    ("a" ace-window "ace")
    ("s" ace-swap-window "swap")
    ("d" ace-delete-window "del")
    ("i" ace-maximize-window "ace-one" :color blue)
    ("b" helm-mini "buf")
    ;;("m" headlong-bookmark-jump "bmk")
    ("q" nil "cancel"))
  (global-set-key (kbd "C-M-o") 'hydra-window/body)
  (key-chord-define-global "jk" 'hydra-window/body)

#+end_src
   

*** Navigate in buffer
#+begin_src emacs-lisp
  (defhydra hydra-navigate (:color amaranth)
   "navigate"
   ("k" beginning-of-defun "beginning-of-defun")
   ("j" end-of-defun "end-of-defun")
   ("h" er/expand-region "expand-region")
   ("l" er/contract-region "contract-region")
   ("a" move-beginning-of-line "line start")
   ("e" move-end-of-line "line end")
   ("SPC" set-mark-command :color red)
   ("n" narrow-to-region "narrow")
   ("q" nil "cancel"))
  (key-chord-define-global "jl" 'hydra-navigate/body)

#+end_src
*** Rectangle
#+begin_src emacs-lisp
  (defhydra hydra-rectangle (:body-pre (rectangle-mark-mode 1)
                             :color pink
                             :post (deactivate-mark))
    "
    _k_     _d_elete    _s_tring
  _h_ _l_   _o_k        _y_ank
    _j_     _n_ew-copy  _r_eset
            _e_xchange  _u_ndo
                        _p_aste
  "
    ("h" backward-char nil)
    ("l" forward-char nil)
    ("k" previous-line nil)
    ("j" next-line nil)
    ("<left>" backward-char nil)
    ("<right>" forward-char nil)
    ("<up>" previous-line nil)
    ("<down>" next-line nil)
    ("e" exchange-point-and-mark nil)
    ("n" copy-rectangle-as-kill nil)
    ("d" delete-rectangle nil)
    ("r" (if (region-active-p)
             (deactivate-mark)
           (rectangle-mark-mode 1)) nil)
    ("y" yank-rectangle nil)
    ("u" undo nil)
    ("s" string-rectangle nil)
    ("p" kill-rectangle nil)
    ("o" nil nil)
    ("q" nil nil)
  )
  (global-set-key (kbd "C-x SPC") 'hydra-rectangle/body)
#+end_src

** KeyChord

I try to hit the keys at the same time so I want a really short delay.
#+begin_src emacs-lisp
(setq key-chord-two-keys-delay 0.05)
#+end_src

** Smart Mode line

#+begin_src emacs-lisp
  (use-package smart-mode-line
               :ensure t)
  (sml/setup)
#+end_src

** Flymake

#+begin_src emacs-lisp
(add-to-list 'guide-key/guide-key-sequence "C-c !")
#+end_src

* Major modes

** IBuffer
#+begin_src emacs-lisp
  (use-package ibuf-ext
    :defer t
    :bind ("C-x C-b" . ibuffer))
#+end_src
